name: Add new implementation versions

on:
  workflow_dispatch:
  schedule:
    # “At minute 36 past every 24th hour.” - https://crontab.guru/#36_*/24_*_*_*
    - cron:  '36 */24 * * *'

defaults:
  run:
    shell: bash

permissions:
  contents: write
  pull-requests: write
  actions: write

jobs:
  add:
    name: Add new ${{ matrix.repository_name }} version to ${{ matrix.test_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - repository_name: go-libp2p
            implementation_name: go-libp2p
            test_name: perf
            implementation_update_script: |
              sed -i "1s/$LOCAL_MAJOR_MINOR_VERSION/$REMOTE_MAJOR_MINOR_VERSION/g" go.mod

              go mod tidy -go=$GO_MAJOR_MINOR_VERSION
              go mod tidy

              go get github.com/libp2p/go-libp2p@$REMOTE_VERSION
            version_update_script: |
              versions="$(jq '. + map(select(.implementation == "go-libp2p" and .id == env.LOCAL_MAJOR_MINOR_VERSION) | .id = env.REMOTE_MAJOR_MINOR_VERSION)' versionsInput.json)"
              echo "$versions" > versionsInput.json
          - repository_name: go-libp2p
            implementation_name: go
            test_name: transport-interop
            implementation_update_script: |
              sed -i "s/image_name := go-${LOCAL_MAJOR_MINOR_VERSION}/image_name := go-${REMOTE_MAJOR_MINOR_VERSION}/g" Makefile
              sed -i "s/version := ${LOCAL_MAJOR_MINOR_VERSION#v}\..*/version := ${REMOTE_VERSION#v}/g" Makefile

              make version.lock
            version_update_script: |
              versions="$(jq '. + map(select(.id == "go-\(env.LOCAL_MAJOR_MINOR_VERSION)") | .id = "go-\(env.REMOTE_MAJOR_MINOR_VERSION)")' versionsInput.json)"
              echo "$versions" > versionsInput.json
    env:
      BRANCH: ${{ matrix.test_name }}/${{ matrix.implementation_name }}
    steps:
      - name: Checkout test-plans
        uses: actions/checkout@v4
      - name: Configure git
        run: |
          git fetch origin $BRANCH && git checkout $BRANCH || git checkout -b $BRANCH
          git rebase $GITHUB_REF -X theirs || git rebase --abort
          git config --global user.email $GITHUB_ACTOR@users.noreply.github.com
          git config --global user.name $GITHUB_ACTOR
      - id: go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Get the latest version (local)
        id: local
        run: ls -d v* | sort -V | tail -n-1 | xargs -I{} echo "version={}" | tee -a $GITHUB_OUTPUT
        working-directory: ${{ matrix.test_name }}/impl/${{ matrix.implementation_name }}
      - name: Get the latest version (remote)
        id: remote
        env:
          GITHUB_TOKEN: ${{ github.token }}
          REPOSITORY_NAME: ${{ matrix.repository_name }}
        run: gh api repos/libp2p/$REPOSITORY_NAME/releases/latest --jq '.tag_name' | xargs -I{} echo "version={}" | tee -a $GITHUB_OUTPUT
      - id: mm
        env:
          REMOTE_VERSION: ${{ steps.remote.outputs.version }}
          GO_VERSION: ${{ steps.go.outputs.go-version }}
        run: |
          echo $REMOTE_VERSION | sed 's/\.[0-9]*$//' | xargs -I{} echo "remote={}" | tee -a $GITHUB_OUTPUT
          echo $GO_VERSION | sed 's/\.[0-9]*$//' | xargs -I{} echo "go={}" | tee -a $GITHUB_OUTPUT
      - name: Add the latest version
        if: ${{ !startsWith(steps.remote.outputs.version, steps.local.outputs.version) }}
        env:
          LOCAL_MAJOR_MINOR_VERSION: ${{ steps.local.outputs.version }}
          REMOTE_VERSION: ${{ steps.remote.outputs.version }}
          REMOTE_MAJOR_MINOR_VERSION: ${{ steps.mm.outputs.remote }}
          GO_VERSION: ${{ steps.go.outputs.go-version }}
          GO_MAJOR_MINOR_VERSION: ${{ steps.mm.outputs.go }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          pushd ${{ matrix.test_name }}/impl/${{ matrix.implementation_name }}
            cp -r $LOCAL_MAJOR_MINOR_VERSION $REMOTE_MAJOR_MINOR_VERSION
            pushd $REMOTE_MAJOR_MINOR_VERSION
              ${{ matrix.implementation_update_script }}
            popd
          popd

          if [[ -f ${{ matrix.test_name }}/package.json ]]; then
            pushd ${{ matrix.test_name }}
          else
            pushd ${{ matrix.test_name }}/runner
          fi
            ${{ matrix.version_update_script }}
          popd

          git add .
          git commit -m "chore: add ${{ matrix.repository_name}}@$REMOTE_VERSION to ${{ matrix.test_name }}"

          git push origin $BRANCH --force

          if [[ $(gh pr list --state open --base $GITHUB_REF --head $BRANCH | wc -l) -eq 0 ]]; then
            gh pr create --title "chore: add ${{ matrix.repository_name }}@$REMOTE_VERSION to ${{ matrix.test_name }}" --body "This PR adds ${{ matrix.repository_name }}@$REMOTE_VERSION to ${{ matrix.test_name }}" --head $BRANCH --base $GITHUB_REF
          fi

          gh workflow run ${{ matrix.test_name }}.yml --ref $BRANCH
